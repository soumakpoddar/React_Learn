Basics and JSX -
1. JSX is a set of instructions that tell react what content we want to show on the screen.
2. The App.JS produces JSX and handles user events.
3. React knows how to work with components.
4. ReactDOM knows how to take instructions on what we want to show and turn into HTML.
5. Babel translates any JS version to ES5 so that it can be easily supported by any browser.
6. While creating an react app, the package.json file is being created at first.
7. If localhost:3000 dosent work visit On Your Network.
8. import statement is used for ES2015 modules whereas require statement is used for common JS modules.
9. The major difference between require and import, is that require will automatically
   scan node_modules to find modules, but import, which comes from ES6, won't.
10. for and id in html allows us to click on the label and automatically select the input.
11. JSX can display everything in curly braces but not objects.

Props or Properties -
1. Props is used to pass data from Parent component to a child component.
2. The main goal of props is to customize and configure a child component.
3. We can also pass components as props by creating <></> tags and passing the component inside those
    tags and we can access it in the child as props.children.
4. Check components repo for that.
5. There are default props which can set the default behaviour of our application. This can be accessed
   by using App.defaultProps={} and passing the default props in this onject. Check Spinner component
   inside seasons for more details.

States -
1. Only usable with class based components.
2. State is a JS object that contains data relevant to a component.
3. Updating state causes the component to instantly re-render.
4. State can be only updated using setState() function.
5. Initialize States in constructor as it is the first method to load in automatically.

Component Lifecycle -
1. A component lifecycle method is a function defined inside of our class based component.
2. If we decide to implement these methods they will be called automatically by React at 
   certain points during the component lifecycle.
3. componentDidMount() -> A good place to do one time data loading.
   Shows its stuff only once during loading...
4. componentDidUpdate() -> A good place to do more data loading when props or state change.
   Called up automatically during updation of stuffs.Before this is called render method is
   called automatically to update and show stuffs.
5. componentDidUnmount() -> Good place to do cleanup especially for non-react stuff.

Handling User Inputs -
1. While passing a onInputChange function in input tag do not give ().
2. In controlled inputs we store information inside the components. In uncontrolled inputs, we store
   information inside HTML DOM.
3. event.preventDefault() is used to stop the form from being submitting on its own.
4. To handle form submit do with arrow function.

** For communicating Parent to Children we can use the props system. But for Children to Parent we can
   use a handler function in the Parent class and pass that function as a prop to child class. In the
   child class's handler function we call that function using this.props.parent_handler() and pass the
   value we want to send to parent class. Check app.js and searchbar.js of pics for more details.

Async and Await -
Use Async in front of method name and await in front of data fetching. See app.js of pics.

** To render list of elements using map function use key as it improves the rendering performance of
   react. Check imagelist.js in pics. Also always add the key to the root element.

React Ref -
1. They give access to a single DOM element.
2. We create refs in the constructor, assign them to instance variables, then pass to a particular JSX
   element as props.

** If we provide only a value to an input and not an onChange() handler we cannot change the value of the
   input.

** For function based components when we want a callback function, if we dont call it by ()=> then the
   function will be called instantly when we load the component and if we call it by ()=>, then the
   function will be called on certain event.

useEffect() -
1. The useEffect() hook helps us to run some piece of code when some of the components have changed.
2. We use useEffect() for the following causes
   a. When the component is rendered for the first time only.
   b. When the component is rendered for the first and whenever it rerenders.
   c. When the component is rendered for the first and (whenever it rerenders and some piece of data
      has changed).
3. Types of useEffect() rendering -
   a. [] -> run only at initial render.
   b. nothing -> run at initial and after each render.
   c. [data] -> run at initial and after every render if data has changed.

** To save react from XSS attacks use dangerouslySetInnerHTML={{__html:value}} in the tag. Use it only when
   some API send the result as HTML pattern.

